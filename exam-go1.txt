第一题：
给定一个二叉树，每个节点上有一个数字。对于每一个叶子节点，输出从该节点到根
节点路径上所有数的和。

         5 
         /\ 
        4  8 
       /   /\ 
      11  13 4 
      /\      \ 
     7  2      1 

如图，有叶子节点 
7，2，13，1，则输出： 
27 
22 
26 
18

分别对应： 


27 =5+4+11+7 
22 =5+4+11+2 
26 =5+8+13 
18 =5+8+4+1

---------------------------
package main

import (
	"bytes"
	"container/list"
	"fmt"
	"math/rand"
	"strconv"
	"time"
)

type Node struct {
	Val    int
	L, R   *Node
	Parent *Node
}

var leafNode []*Node

func NewNode(val int, l, r, parent *Node) *Node {
	return &Node{val, l, r, parent}
}

func (d *Node) Parse() {
	if d == nil {
		return
	}
	d.L.Parse()
	d.R.Parse()
	if d.L == nil && d.R == nil {
		leafNode = append(leafNode, d)
		//	fmt.Println(d.Val)
	}
}

func CreateNode() *Node {
	var root = NewNode(5, nil, nil, nil)
	var l, r, parent *Node

	l = NewNode(7, nil, nil, nil)
	r = NewNode(2, nil, nil, nil)

	parent = NewNode(11, l, r, nil)
	l.Parent = parent
	r.Parent = parent
	l = parent
	l = NewNode(4, l, nil, root)
	parent.Parent = l
	root.L = l

	r = NewNode(1, nil, nil, nil)
	parent = NewNode(4, nil, r, nil)
	r.Parent = parent
	r = parent

	l = NewNode(13, nil, nil, nil)
	r = NewNode(8, l, r, root)
	l.Parent = r
	parent.Parent = r

	root.R = r
	return root
}

func PrintTotal(node *Node) {
	val := node.Val
	var n int
	for {

		n += node.Val
		if node.Parent == nil {
			break
		}
		node = node.Parent
	}
	fmt.Printf(" leaf %d sum %d\n", val, n)
}

func Sum(leafNode []*Node) {
	for _, node := range leafNode {
		PrintTotal(node)
	}
}



第二题：
给定一个 n个数的数组（ n<= 10,000,000）,以及一个数字 k，请输出：数组中出现最频繁的 k个数。
如：数组 [2,3,1,5,2,1,2,4,3,2,3]， k=3
出现最频繁的数分别是 2和3（2出现4次，3出现 3次），其次是 1（出现2次）所以输出 
1,2,3这3个数即可，输出顺序随意。
---------------------------
func TopVal(n int, k int) {
	fmt.Printf("Topval n=%d k=%d\n", n, k)

	rand.Seed(time.Now().UnixNano())
	var value = make(map[int]int)

	counts := make([][]int, n+1)

	var buf []int
	for i := 0; i < n; i++ {
		v := rand.Intn(n)
		buf = append(buf, v)
		value[v]++

	}
	fmt.Println("val=", buf)

	for k, v := range value {
		counts[v] = append(counts[v], k)
		//fmt.Printf("----v=%d count %d \n", k, v)
	}

	m := 0
	for j := n; j > 0; j-- {
		//fmt.Printf("index=%d %#V \n", j, counts[j])
		for _, v := range counts[j] {
			fmt.Println(" count= ", j, "val=", v)

			m++
			if m >= k {
				goto LL
			}
		}
	}
LL:
}


第三题：
现在有一种字符串的压缩规则是这样的：k[string]表示 string连续出现 k次（0 < k< 1000）。
比如： s="ef3[a]2[bc]gh",解压后的字符串为："efaaabcbcgh"
这种压缩也可以相互嵌套： s="3[a2[c]]",解压后为："accaccacc"
输入一个压缩的字符串s，请输出解压后的字符串。
输入都是严格合法的，数字只用来表示重复次数，不会出现 3a或者 2[4]这样的输入。
解压后的字符串只有字母。
---------------------------
func Pop(st *list.List) interface{} {
	v := st.Back()
	if v == nil {
		fmt.Println(" st nil")
		return nil
	}
	val := v.Value
	st.Remove(v)
	return val
}

func Unzip(s string) string {
	st := list.New()

	var str bytes.Buffer
	var num bytes.Buffer

	for i := 0; i < len(s); i++ {
		//fmt.Printf("====index=%d ch=%c\n", i, s[i])

		if s[i] >= '0' && s[i] <= '9' {

			num.WriteByte(s[i])
		} else if s[i] == '[' {
			if str.Len() > 0 {
				st.PushBack(str.String())
				fmt.Println("push str ", str.String())
				str.Reset()
			}

			if num.Len() > 0 {
				k, _ := strconv.Atoi(num.String())
				st.PushBack(k)
				fmt.Println("push num ", k)
				num.Reset()
			}

		} else if s[i] == ']' {
			var strget string

			//fmt.Println("str ", str.String())

			var stradd string

			for {
				val := Pop(st)
				if val == nil {
					st.PushBack(stradd)
					break
				}
				//	fmt.Println(" st pop ", val)

				switch val.(type) {
				case string:
					s := val.(string)
					stradd = s + stradd

					//fmt.Println("--string strget", stradd)
				case int:
					k := val.(int)
					//	fmt.Println("int snum ", k)

					if str.Len() > 0 {
						for i := 0; i < k; i++ {
							strget += str.String()
						}
						str.Reset()
					} else {
						if stradd != "" {
							for i := 0; i < k; i++ {
								strget += stradd
							}
							stradd = ""
						}

					}

					st.PushBack(strget)
					fmt.Println("---push ", strget)
					strget = ""
					break
				}
			}

		} else {
			str.WriteByte(s[i])
		}

	}

	var val string
	for {
		v := Pop(st)
		if v == nil {
			break
		}

		val += v.(string)

	}
	if str.Len() > 0 {
		val += str.String()
	}
	return val
}

//三道题的测试

func main() {

	fmt.Println(auth)
	fmt.Println("1题 ---")
	{
		root := CreateNode()
		root.Parse()
		Sum(leafNode)
	}

	fmt.Println("\n\n2题 ---")
	{
		TopVal(10, 3)
	}

	fmt.Println("\n\n3题 ---")
	{
		s := "ef3[a]2[bc]gh"
		//s := "vv3[a1[cg1[e1[w]]]]hh"
		str := Unzip(s)
		fmt.Println("=========unzip", str)
	}

	time.Sleep(time.Second * 100000)
	fmt.Println("exit")
}
